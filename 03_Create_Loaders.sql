SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

USE [demoDW]
GO

CREATE OR ALTER PROCEDURE LOADER_STATE_D AS
BEGIN

	-- LOAD STATE_D

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT
		DECLARE @STATE_D_ID INT, @STATEPROVINCEID INT, @STATEPROVINCECODE NVARCHAR(5), 
			@STATEPROVINCENAME NVARCHAR(50), @SALESTERRITORY NVARCHAR(50)
		DECLARE @N_STATEPROVINCECODE NVARCHAR(5), @N_STATEPROVINCENAME NVARCHAR(50), 
			@N_SALESTERRITORY NVARCHAR(50)

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'STATE_D'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				STATEPROVINCEID
				, STATEPROVINCECODE
				, STATEPROVINCENAME
				, SALESTERRITORY
			FROM
				WideWorldImporters.[Application].StateProvinces
			FOR SYSTEM_TIME
				BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				STATEPROVINCEID, VALIDFROM

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @STATEPROVINCEID, @STATEPROVINCECODE, @STATEPROVINCENAME, @SALESTERRITORY

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1

			IF NOT EXISTS (SELECT STATE_D_ID FROM STATE_D WHERE STATE_SRC_ID = @STATEPROVINCEID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1
			
				INSERT INTO STATE_D (STATE_SRC_ID, STATE_CODE, STATE_NAME, SALES_TERRITORY) 
					VALUES (@STATEPROVINCEID, @STATEPROVINCECODE, @STATEPROVINCENAME, @SALESTERRITORY)

			END
			ELSE
			BEGIN

				SELECT
					@N_STATEPROVINCECODE = STATE_CODE
					, @N_STATEPROVINCENAME = STATE_NAME
					, @N_SALESTERRITORY = SALES_TERRITORY
				FROM
					STATE_D
				WHERE
					STATE_SRC_ID = @STATEPROVINCEID

				IF @N_STATEPROVINCECODE <> @STATEPROVINCECODE OR @N_STATEPROVINCENAME <> @STATEPROVINCENAME OR @N_SALESTERRITORY <> @SALESTERRITORY
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					UPDATE
						STATE_D
					SET
						STATE_CODE = @STATEPROVINCECODE
						, STATE_NAME = @STATEPROVINCENAME
						, SALES_TERRITORY = @SALESTERRITORY
						, LAST_UPDATE_DATE = GETDATE()
					WHERE
						STATE_SRC_ID = @STATEPROVINCEID

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @STATEPROVINCEID, @STATEPROVINCECODE, @STATEPROVINCENAME, @SALESTERRITORY

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('STATE_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

CREATE OR ALTER PROCEDURE LOADER_BUYING_GROUP_D AS
BEGIN

	-- LOAD BUYING_GROUP_D

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT
		DECLARE @BUYING_GROUP_D_ID INT, @BUYINGGROUPID INT, @BUYINGGROUPNAME NVARCHAR(50)
		DECLARE @N_BUYINGGROUPID INT, @N_BUYINGGROUPNAME NVARCHAR(50)

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'BUYING_GROUP_D'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				BUYINGGROUPID
				, BUYINGGROUPNAME
			FROM
				WideWorldImporters.[Sales].BuyingGroups
			FOR SYSTEM_TIME
				BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				BUYINGGROUPID, VALIDFROM

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @BUYINGGROUPID, @BUYINGGROUPNAME

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1
		
			IF NOT EXISTS (SELECT BUYING_GROUP_D_ID FROM BUYING_GROUP_D WHERE GROUP_SRC_ID = @BUYINGGROUPID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO BUYING_GROUP_D (GROUP_NAME, GROUP_SRC_ID) 
					VALUES (@BUYINGGROUPNAME, @BUYINGGROUPID)

			END
			ELSE
			BEGIN

				SELECT
					@N_BUYINGGROUPNAME = GROUP_NAME
				FROM
					BUYING_GROUP_D
				WHERE
					GROUP_SRC_ID = @BUYINGGROUPID

				IF @N_BUYINGGROUPNAME <> @BUYINGGROUPNAME
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					UPDATE
						BUYING_GROUP_D
					SET
						GROUP_NAME = @BUYINGGROUPNAME
						, LAST_UPDATE_DATE = GETDATE()
					WHERE
						GROUP_SRC_ID = @BUYINGGROUPID

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @BUYINGGROUPID, @BUYINGGROUPNAME

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('BUYING_GROUP_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

CREATE OR ALTER PROCEDURE LOADER_CITY_D AS
BEGIN

	-- LOAD CITY_D

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT
		DECLARE @CITY_D_ID INT, @CITYID INT, @CITYNAME NVARCHAR(50), @STATEPROVINCEID INT, @STATE_D_ID INT
		DECLARE @N_CITYID INT, @N_CITYNAME NVARCHAR(50), @N_STATEPROVINCEID INT, @N_STATE_D_ID INT

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'CITY_D'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				CITYID
				, CITYNAME
				, STATEPROVINCEID
			FROM
				WideWorldImporters.[Application].Cities
			FOR SYSTEM_TIME
				BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				CITYID, VALIDFROM

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @CITYID, @CITYNAME, @STATEPROVINCEID

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1

			IF NOT EXISTS (SELECT STATE_D_ID FROM STATE_D WHERE STATE_SRC_ID = @STATEPROVINCEID)
			BEGIN

				SET @STATE_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @STATE_D_ID = STATE_D_ID FROM STATE_D WHERE STATE_SRC_ID = @STATEPROVINCEID

			END

			IF NOT EXISTS (SELECT CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @CITYID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO CITY_D (CITY_NAME, STATE_D_ID, CITY_SRC_ID) 
					VALUES (@CITYNAME, @STATE_D_ID, @CITYID)

			END
			ELSE
			BEGIN

				SELECT
					@N_CITYNAME = CITY_NAME
					, @N_STATE_D_ID = STATE_D_ID
				FROM
					CITY_D
				WHERE
					CITY_SRC_ID = @CITYID

				IF @N_CITYNAME <> @CITYNAME OR @N_STATE_D_ID <> @STATE_D_ID
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					UPDATE
						CITY_D
					SET
						CITY_NAME = @CITYNAME
						, STATE_D_ID = @STATE_D_ID
						, LAST_UPDATE_DATE = GETDATE()
					WHERE
						CITY_SRC_ID = @CITYID

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @CITYID, @CITYNAME, @STATEPROVINCEID

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('CITY_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

CREATE OR ALTER PROCEDURE LOADER_CUSTOMER_CATEGORY_D AS
BEGIN

	-- LOAD CUSTOMER_CATEGORY_D

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT
		DECLARE @CUSTOMER_CATEGORY_D_ID INT, @CUSTOMERCATEGORYID INT, @CUSTOMERCATEGORYNAME NVARCHAR(50)
		DECLARE @N_CUSTOMERCATEGORYID INT, @N_CUSTOMERCATEGORYNAME NVARCHAR(50)

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'CUSTOMER_CATEGORY_D'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				CUSTOMERCATEGORYID
				, CUSTOMERCATEGORYNAME
			FROM
				WideWorldImporters.[Sales].CustomerCategories
			FOR SYSTEM_TIME
				BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				CUSTOMERCATEGORYID, VALIDFROM

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @CUSTOMERCATEGORYID, @CUSTOMERCATEGORYNAME

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1

			IF NOT EXISTS (SELECT CUSTOMER_CATEGORY_D_ID FROM CUSTOMER_CATEGORY_D WHERE CATEGORY_SRC_ID = @CUSTOMERCATEGORYID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO CUSTOMER_CATEGORY_D (CATEGORY_NAME, CATEGORY_SRC_ID) 
					VALUES (@CUSTOMERCATEGORYNAME, @CUSTOMERCATEGORYID)

			END
			ELSE
			BEGIN

				SELECT
					@N_CUSTOMERCATEGORYNAME = CATEGORY_NAME
				FROM
					CUSTOMER_CATEGORY_D
				WHERE
					CATEGORY_SRC_ID = @CUSTOMERCATEGORYID

				IF @CUSTOMERCATEGORYNAME <> @N_CUSTOMERCATEGORYNAME
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					UPDATE
						CUSTOMER_CATEGORY_D
					SET
						CATEGORY_NAME = @CUSTOMERCATEGORYNAME
						, LAST_UPDATE_DATE = GETDATE()
					WHERE
						CATEGORY_SRC_ID = @CUSTOMERCATEGORYID

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @CUSTOMERCATEGORYID, @CUSTOMERCATEGORYNAME

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('CUSTOMER_CATEGORY_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

CREATE OR ALTER PROCEDURE LOADER_DELIVERY_METHOD_D AS
BEGIN

	-- LOAD DELIVERY_METHOD_D

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT
		DECLARE @DELIVERY_METHOD_D_ID INT, @DELIVERYMETHODID INT, @DELIVERYMETHODNAME NVARCHAR(50)
		DECLARE @N_DELIVERYMETHODID INT, @N_DELIVERYMETHODNAME NVARCHAR(50)

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'DELIVERY_METHOD_D'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				DELIVERYMETHODID
				, DELIVERYMETHODNAME
			FROM
				WideWorldImporters.[Application].DeliveryMethods
			FOR SYSTEM_TIME
				BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				DELIVERYMETHODID, VALIDFROM

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @DELIVERYMETHODID, @DELIVERYMETHODNAME

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1

			IF NOT EXISTS (SELECT DELIVERY_METHOD_D_ID FROM DELIVERY_METHOD_D WHERE METHOD_SRC_ID = @DELIVERYMETHODID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO DELIVERY_METHOD_D (METHOD_NAME, METHOD_SRC_ID) 
					VALUES (@DELIVERYMETHODNAME, @DELIVERYMETHODID)

			END
			ELSE
			BEGIN

				SELECT
					@N_DELIVERYMETHODNAME = METHOD_NAME
				FROM
					DELIVERY_METHOD_D
				WHERE
					METHOD_SRC_ID = @DELIVERYMETHODID

				IF @N_DELIVERYMETHODNAME <> @DELIVERYMETHODNAME
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					UPDATE
						DELIVERY_METHOD_D
					SET
						METHOD_NAME = @DELIVERYMETHODNAME
						, LAST_UPDATE_DATE = GETDATE()
					WHERE
						METHOD_SRC_ID = @DELIVERYMETHODID

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @DELIVERYMETHODID, @DELIVERYMETHODNAME

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('DELIVERY_METHOD_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

CREATE OR ALTER PROCEDURE LOADER_PERSON_D AS
BEGIN

	-- LOAD PERSON_D

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT

		DECLARE @PERSON_D_ID INT, @PERSON_UNQ_D_ID INT, @PERSON_SRC_ID INT, @FULL_NAME NVARCHAR(50),
			@PREFERRED_NAME NVARCHAR(50), @IS_PERMITTED_TO_LOGON BIT, @LOGON_NAME NVARCHAR(50),
			@IS_EXTERNAL_LOGON_PROVIDER BIT, @IS_SYSTEM_USER BIT, @IS_EMPLOYEE BIT, @IS_SALESPERSON BIT,
			@PHONE_NUMBER NVARCHAR(50), @FAX_NUMBER NVARCHAR(50), @EMAIL_ADDRESS NVARCHAR(50), 
			@VALIDFROM DATETIME2(7)
	
		DECLARE @N_PERSON_D_ID INT, @N_PERSON_UNQ_D_ID INT, @N_PERSON_SRC_ID INT, @N_FULL_NAME NVARCHAR(50),
			@N_PREFERRED_NAME NVARCHAR(50), @N_IS_PERMITTED_TO_LOGON BIT, @N_LOGON_NAME NVARCHAR(50),
			@N_IS_EXTERNAL_LOGON_PROVIDER BIT, @N_IS_SYSTEM_USER BIT, @N_IS_EMPLOYEE BIT, @N_IS_SALESPERSON BIT,
			@N_PHONE_NUMBER NVARCHAR(50), @N_FAX_NUMBER NVARCHAR(50), @N_EMAIL_ADDRESS NVARCHAR(50)

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'PERSON_D'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				PERSONID
				, FULLNAME
				, PREFERREDNAME
				, ISPERMITTEDTOLOGON
				, LOGONNAME
				, ISEXTERNALLOGONPROVIDER
				, ISSYSTEMUSER
				, ISEMPLOYEE
				, ISSALESPERSON
				, PHONENUMBER
				, FAXNUMBER
				, EMAILADDRESS
				, VALIDFROM
			FROM
				WideWorldImporters.[Application].People
			FOR SYSTEM_TIME
				BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				PERSONID, VALIDFROM

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @PERSON_SRC_ID, @FULL_NAME, @PREFERRED_NAME, @IS_PERMITTED_TO_LOGON, @LOGON_NAME, 
			@IS_EXTERNAL_LOGON_PROVIDER, @IS_SYSTEM_USER, @IS_EMPLOYEE, @IS_SALESPERSON, @PHONE_NUMBER, @FAX_NUMBER,
			@EMAIL_ADDRESS, @VALIDFROM

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @PERSON_SRC_ID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO PERSON_D (PERSON_UNQ_D_ID, PERSON_SRC_ID, FULL_NAME, PREFERRED_NAME, IS_PERMITTED_TO_LOGON,
					LOGON_NAME, IS_EXTERNAL_LOGON_PROVIDER, IS_SYSTEM_USER, IS_EMPLOYEE, IS_SALESPERSON, PHONE_NUMBER,
					FAX_NUMBER, EMAIL_ADDRESS, CREATED_DATE, LAST_UPDATE_DATE) 
				VALUES (NEXT VALUE FOR SQ_PERSON, @PERSON_SRC_ID, @FULL_NAME, @PREFERRED_NAME, @IS_PERMITTED_TO_LOGON, 
					@LOGON_NAME, @IS_EXTERNAL_LOGON_PROVIDER, @IS_SYSTEM_USER, @IS_EMPLOYEE, @IS_SALESPERSON, 
					@PHONE_NUMBER, @FAX_NUMBER, @EMAIL_ADDRESS, @VALIDFROM, @VALIDFROM)

			END
			ELSE
			BEGIN
		
				SELECT
					@N_PERSON_UNQ_D_ID = a.PERSON_UNQ_D_ID
					, @N_FULL_NAME = a.FULL_NAME
					, @N_PREFERRED_NAME = a.PREFERRED_NAME
					, @N_IS_PERMITTED_TO_LOGON = a.IS_PERMITTED_TO_LOGON
					, @N_LOGON_NAME = a.LOGON_NAME
					, @N_IS_EXTERNAL_LOGON_PROVIDER = a.IS_EXTERNAL_LOGON_PROVIDER
					, @N_IS_SYSTEM_USER = a.IS_SYSTEM_USER
					, @N_IS_EMPLOYEE = a.IS_EMPLOYEE
					, @N_IS_SALESPERSON = a.IS_SALESPERSON
					, @N_PHONE_NUMBER = a.PHONE_NUMBER
					, @N_FAX_NUMBER = a.FAX_NUMBER
					, @N_EMAIL_ADDRESS = a.EMAIL_ADDRESS
				FROM
					PERSON_D a
					INNER JOIN
					(
						SELECT
							ROW_NUMBER() OVER(ORDER BY PERSON_D_ID DESC) AS ROW
							, PERSON_D_ID
							, PERSON_UNQ_D_ID
						FROM
							PERSON_D
						WHERE
							PERSON_SRC_ID = @PERSON_SRC_ID
					) b ON
						a.PERSON_D_ID = b.PERSON_D_ID
				WHERE
					PERSON_SRC_ID = @PERSON_SRC_ID
					AND b.[ROW] = 1

				IF @N_FULL_NAME <> @FULL_NAME OR @N_PREFERRED_NAME <> @PREFERRED_NAME OR @N_IS_PERMITTED_TO_LOGON <> @IS_PERMITTED_TO_LOGON OR
					@N_LOGON_NAME <> @LOGON_NAME OR @IS_EXTERNAL_LOGON_PROVIDER <> @IS_EXTERNAL_LOGON_PROVIDER OR
					@N_IS_SYSTEM_USER <> @IS_SYSTEM_USER OR @N_IS_EMPLOYEE <> @IS_EMPLOYEE OR @N_IS_SALESPERSON <> @IS_SALESPERSON OR
					@N_PHONE_NUMBER <> @PHONE_NUMBER OR @N_FAX_NUMBER <> @FAX_NUMBER OR @N_EMAIL_ADDRESS <> @EMAIL_ADDRESS
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					INSERT INTO PERSON_D (PERSON_UNQ_D_ID, PERSON_SRC_ID, FULL_NAME, PREFERRED_NAME, IS_PERMITTED_TO_LOGON,
						LOGON_NAME, IS_EXTERNAL_LOGON_PROVIDER, IS_SYSTEM_USER, IS_EMPLOYEE, IS_SALESPERSON, PHONE_NUMBER,
						FAX_NUMBER, EMAIL_ADDRESS, CREATED_DATE, LAST_UPDATE_DATE) 
					VALUES (@N_PERSON_UNQ_D_ID, @PERSON_SRC_ID, @FULL_NAME, @PREFERRED_NAME, @IS_PERMITTED_TO_LOGON, 
						@LOGON_NAME, @IS_EXTERNAL_LOGON_PROVIDER, @IS_SYSTEM_USER, @IS_EMPLOYEE, @IS_SALESPERSON, 
						@PHONE_NUMBER, @FAX_NUMBER, @EMAIL_ADDRESS, @VALIDFROM, @VALIDFROM)

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @PERSON_SRC_ID, @FULL_NAME, @PREFERRED_NAME, @IS_PERMITTED_TO_LOGON, @LOGON_NAME, 
				@IS_EXTERNAL_LOGON_PROVIDER, @IS_SYSTEM_USER, @IS_EMPLOYEE, @IS_SALESPERSON, @PHONE_NUMBER, @FAX_NUMBER,
				@EMAIL_ADDRESS, @VALIDFROM

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('PERSON_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

CREATE OR ALTER PROCEDURE LOADER_CUSTOMER_D AS
BEGIN

	-- LOAD CUSTOMER_D

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT
	
		DECLARE @CUSTOMER_D_ID INT, @CUSTOMER_ID INT, @CUSTOMER_NAME NVARCHAR(100), @BILL_TO_CUSTOMER_ID INT, 
			@CUSTOMER_CATEGORY_ID INT, @BUYING_GROUP_ID INT, @PRIMARY_CONTACT_PERSON_ID INT,
			@ALT_CONTACT_PERSON_ID INT, @DELIVERY_METHOD_ID INT, @DELIVERY_CITY_ID INT, @POSTAL_CITY_ID INT,
			@CREDIT_LIMIT DECIMAL(18,2), @OPEN_DATE DATE, @DISCOUNT DECIMAL(18,3), @IS_STMT_SENT BIT,
			@IS_CREDIT_HOLD BIT, @PAYMENT_DAYS INT, @PHONE_NUMBER NVARCHAR(20), @FAX_NUMBER NVARCHAR(20),
			@DELIVERY_RUN NVARCHAR(5), @RUN_POS NVARCHAR(5), @WEB NVARCHAR(256), @DELIVERY_ADDR1 NVARCHAR(60),
			@DELIVERY_ADDR2 NVARCHAR(60), @DELIVERY_POSTAL_CODE NVARCHAR(10), @DELIVERY_LOC GEOGRAPHY,
			@POST_ADDR1 NVARCHAR(60), @POST_ADDR2 NVARCHAR(60), @POST_ADDR_CODE NCHAR(10)	

		DECLARE @BILL_TO_CUSTOMER_D_ID INT, @CUSTOMER_CATEGORY_D_ID INT, @BUYING_GROUP_D_ID INT, @PRIMARY_CONTACT_PERSON_D_ID INT,
			@PRIMARY_CONTACT_PERSON_UNQ_D_ID INT, @ALT_CONTACT_PERSON_D_ID INT, @ALT_CONTACT_PERSON_UNQ_D_ID INT,
			@DELIVERY_METHOD_D_ID INT, @DELIVERY_CITY_D_ID INT, @POSTAL_CITY_D_ID INT

		DECLARE @N_CUSTOMER_NAME NVARCHAR(100), @N_BILL_TO_CUSTOMER_D_ID INT, @N_CUSTOMER_CATEGORY_D_ID INT, @N_BUYING_GROUP_D_ID INT
			, @N_PRIMARY_CONTACT_PERSON_D_ID INT, @N_ALT_CONTACT_PERSON_D_ID INT, @N_DELIVERY_METHOD_D_ID INT, @N_DELIVERY_CITY_D_ID INT
			, @N_POSTAL_CITY_D_ID INT, @N_CREDIT_LIMIT DECIMAL(18,2), @N_OPEN_DATE DATE, @N_DISCOUNT DECIMAL(18,3), @N_IS_STMT_SENT BIT
			, @N_IS_CREDIT_HOLD BIT, @N_PAYMENT_DAYS INT, @N_PHONE_NUMBER NVARCHAR(20), @N_FAX_NUMBER NVARCHAR(20), @N_DELIVERY_RUN NVARCHAR(5)
			, @N_RUN_POS NVARCHAR(5), @N_WEB NVARCHAR(256), @N_DELIVERY_ADDR1 NVARCHAR(60), @N_DELIVERY_ADDR2 NVARCHAR(60), @N_DELIVERY_POSTAL_CODE NCHAR(10)
			, @N_DELIVERY_LOC GEOGRAPHY, @N_POST_ADDR1 NVARCHAR(60), @N_POST_ADDR2 NVARCHAR(60), @N_POST_ADDR_CODE NCHAR(10)

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'CUSTOMER_D'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				CustomerID, CustomerName, BillToCustomerID, CustomerCategoryID, BuyingGroupID, PrimaryContactPersonID, AlternateContactPersonID,
				DeliveryMethodID, DeliveryCityID, PostalCityID, CreditLimit, AccountOpenedDate, StandardDiscountPercentage, IsStatementSent,
				IsOnCreditHold, PaymentDays, PhoneNumber, FaxNumber, DeliveryRun, RunPosition, WebsiteURL, DeliveryAddressLine1,
				DeliveryAddressLine2, DeliveryPostalCode, DeliveryLocation, PostalAddressLine1, PostalAddressLine2,
				PostalPostalCode
			FROM
				WideWorldImporters.[Sales].Customers
			FOR SYSTEM_TIME
				BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				CustomerID, VALIDFROM

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @CUSTOMER_ID, @CUSTOMER_NAME, @BILL_TO_CUSTOMER_ID, 
			@CUSTOMER_CATEGORY_ID, @BUYING_GROUP_ID, @PRIMARY_CONTACT_PERSON_ID,
			@ALT_CONTACT_PERSON_ID, @DELIVERY_METHOD_ID, @DELIVERY_CITY_ID, @POSTAL_CITY_ID,
			@CREDIT_LIMIT, @OPEN_DATE, @DISCOUNT, @IS_STMT_SENT,
			@IS_CREDIT_HOLD, @PAYMENT_DAYS, @PHONE_NUMBER, @FAX_NUMBER,
			@DELIVERY_RUN, @RUN_POS, @WEB, @DELIVERY_ADDR1,
			@DELIVERY_ADDR2, @DELIVERY_POSTAL_CODE, @DELIVERY_LOC,
			@POST_ADDR1, @POST_ADDR2, @POST_ADDR_CODE

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1

			-- PROCESS LOOKUPS

			IF (@CUSTOMER_ID = @BILL_TO_CUSTOMER_ID)
			BEGIN

				SET @BILL_TO_CUSTOMER_D_ID = -999

			END
			ELSE
			BEGIN

				IF NOT EXISTS (SELECT CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @BILL_TO_CUSTOMER_ID)
				BEGIN

					SET @BILL_TO_CUSTOMER_D_ID = -999

				END
				ELSE
				BEGIN

					SELECT @BILL_TO_CUSTOMER_D_ID = CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @BILL_TO_CUSTOMER_ID

				END			

			END		

			IF NOT EXISTS (SELECT CUSTOMER_CATEGORY_D_ID FROM CUSTOMER_CATEGORY_D WHERE CATEGORY_SRC_ID = @CUSTOMER_CATEGORY_ID)
			BEGIN

				SET @CUSTOMER_CATEGORY_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @CUSTOMER_CATEGORY_D_ID = CUSTOMER_CATEGORY_D_ID FROM CUSTOMER_CATEGORY_D WHERE CATEGORY_SRC_ID = @CUSTOMER_CATEGORY_ID

			END

			IF NOT EXISTS (SELECT BUYING_GROUP_D_ID FROM BUYING_GROUP_D WHERE GROUP_SRC_ID = @BUYING_GROUP_ID)
			BEGIN

				SET @BUYING_GROUP_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @BUYING_GROUP_D_ID = BUYING_GROUP_D_ID FROM BUYING_GROUP_D WHERE GROUP_SRC_ID = @BUYING_GROUP_ID

			END

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @PRIMARY_CONTACT_PERSON_ID)
			BEGIN

				SET @PRIMARY_CONTACT_PERSON_D_ID = -999
				SET @PRIMARY_CONTACT_PERSON_UNQ_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT 
					@PRIMARY_CONTACT_PERSON_D_ID = a.PERSON_D_ID
					, @PRIMARY_CONTACT_PERSON_UNQ_D_ID = a.PERSON_UNQ_D_ID
				FROM 
					PERSON_D a
					INNER JOIN
					(
						SELECT
							ROW_NUMBER() OVER(ORDER BY PERSON_D_ID DESC) AS ROW
							, PERSON_D_ID
							, PERSON_UNQ_D_ID
						FROM
							PERSON_D
						WHERE
							PERSON_SRC_ID = @PRIMARY_CONTACT_PERSON_ID
					) b ON
					a.PERSON_D_ID = b.PERSON_D_ID
				WHERE 
					a.PERSON_SRC_ID = @PRIMARY_CONTACT_PERSON_ID
					AND b.[ROW] = 1

			END		

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @ALT_CONTACT_PERSON_ID)
			BEGIN

				SET @ALT_CONTACT_PERSON_D_ID = -999
				SET @ALT_CONTACT_PERSON_UNQ_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT 
					@ALT_CONTACT_PERSON_D_ID = a.PERSON_D_ID
					, @ALT_CONTACT_PERSON_UNQ_D_ID = a.PERSON_UNQ_D_ID
				FROM 
					PERSON_D a
					INNER JOIN
					(
						SELECT
							ROW_NUMBER() OVER(ORDER BY PERSON_D_ID DESC) AS ROW
							, PERSON_D_ID
							, PERSON_UNQ_D_ID
						FROM
							PERSON_D
						WHERE
							PERSON_SRC_ID = @ALT_CONTACT_PERSON_ID
					) b ON
					a.PERSON_D_ID = b.PERSON_D_ID
				WHERE 
					a.PERSON_SRC_ID = @ALT_CONTACT_PERSON_ID
					AND b.[ROW] = 1

			END	
			
			IF NOT EXISTS (SELECT DELIVERY_METHOD_D_ID FROM DELIVERY_METHOD_D WHERE METHOD_SRC_ID = @DELIVERY_METHOD_ID)
			BEGIN

				SET @DELIVERY_METHOD_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @DELIVERY_METHOD_D_ID = DELIVERY_METHOD_D_ID FROM DELIVERY_METHOD_D WHERE METHOD_SRC_ID = @DELIVERY_METHOD_ID

			END	

			IF NOT EXISTS (SELECT CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @DELIVERY_CITY_ID)
			BEGIN

				SET @DELIVERY_CITY_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @DELIVERY_CITY_D_ID = CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @DELIVERY_CITY_ID

			END

			IF NOT EXISTS (SELECT CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @POSTAL_CITY_ID)
			BEGIN

				SET @POSTAL_CITY_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @POSTAL_CITY_D_ID = CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @POSTAL_CITY_ID

			END

			-- LOAD

			IF NOT EXISTS (SELECT CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @CUSTOMER_ID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO CUSTOMER_D (CUSTOMER_SRC_ID, CUSTOMER_NAME, BILL_TO_CUSTOMER_D_ID, CUSTOMER_CATEGORY_D_ID,
					BUYING_GROUP_D_ID, PRIMARY_CONTACT_PERSON_D_ID, PRIMARY_CONTACT_PERSON_CUR_D_ID,
					ALT_CONTACT_PERSON_D_ID, ALT_CONTACT_PERSON_CUR_D_ID, DELIVERY_METHOD_D_ID, DELIVERY_CITY_D_ID,
					POSTAL_CITY_D_ID, CREDIT_LIMIT, OPENED_DATE, DISCOUNT_PERCENT, IS_STMT_SENT, IS_CREDIT_HOLD,
					PAYMENT_DAYS, PHONE_NUMBER, FAX_NUMBER, DELIVERY_RUN, RUN_POSITION, WEBSITE_URL,
					DELIVERY_ADDRESS_LINE_1, DELIVERY_ADDRESS_LINE_2, DELIVERY_POSTAL_CODE, DELIVERY_LOCATION,
					POSTAL_ADDRESS_LINE_1, POSTAL_ADDRESS_LINE_2, POSTAL_ADDRESS_CODE) 
				VALUES (@CUSTOMER_ID, @CUSTOMER_NAME, @BILL_TO_CUSTOMER_D_ID, @CUSTOMER_CATEGORY_D_ID, @BUYING_GROUP_D_ID,
					@PRIMARY_CONTACT_PERSON_D_ID, @PRIMARY_CONTACT_PERSON_UNQ_D_ID, @ALT_CONTACT_PERSON_D_ID,
					@ALT_CONTACT_PERSON_UNQ_D_ID, @DELIVERY_METHOD_D_ID, @DELIVERY_CITY_D_ID, @POSTAL_CITY_D_ID,
					@CREDIT_LIMIT, @OPEN_DATE, @DISCOUNT, @IS_STMT_SENT, @IS_CREDIT_HOLD, @PAYMENT_DAYS,
					@PHONE_NUMBER, @FAX_NUMBER, @DELIVERY_RUN, @RUN_POS, @WEB, @DELIVERY_ADDR1, 
					@DELIVERY_ADDR2, @DELIVERY_POSTAL_CODE, @DELIVERY_LOC, @POST_ADDR1, @POST_ADDR2,
					@POST_ADDR_CODE)

			END
			ELSE
			BEGIN

				SELECT
					@N_CUSTOMER_NAME = CUSTOMER_NAME
					, @N_BILL_TO_CUSTOMER_D_ID = BILL_TO_CUSTOMER_D_ID
					, @N_CUSTOMER_CATEGORY_D_ID = CUSTOMER_CATEGORY_D_ID
					, @N_BUYING_GROUP_D_ID = BUYING_GROUP_D_ID
					, @N_PRIMARY_CONTACT_PERSON_D_ID = PRIMARY_CONTACT_PERSON_D_ID
					, @N_ALT_CONTACT_PERSON_D_ID = ALT_CONTACT_PERSON_D_ID
					, @N_DELIVERY_METHOD_D_ID = DELIVERY_METHOD_D_ID
					, @N_DELIVERY_CITY_D_ID = DELIVERY_CITY_D_ID
					, @N_POSTAL_CITY_D_ID = POSTAL_CITY_D_ID
					, @N_CREDIT_LIMIT = CREDIT_LIMIT
					, @N_OPEN_DATE = OPENED_DATE
					, @N_DISCOUNT = DISCOUNT_PERCENT
					, @N_IS_STMT_SENT = IS_STMT_SENT
					, @N_IS_CREDIT_HOLD = IS_CREDIT_HOLD
					, @N_PAYMENT_DAYS = PAYMENT_DAYS
					, @N_PHONE_NUMBER = PHONE_NUMBER
					, @N_FAX_NUMBER = FAX_NUMBER
					, @N_DELIVERY_RUN = DELIVERY_RUN
					, @N_RUN_POS = RUN_POSITION
					, @N_WEB = WEBSITE_URL
					, @N_DELIVERY_ADDR1 = DELIVERY_ADDRESS_LINE_1
					, @N_DELIVERY_ADDR2 = DELIVERY_ADDRESS_LINE_2
					, @N_DELIVERY_POSTAL_CODE = DELIVERY_POSTAL_CODE
					, @N_DELIVERY_LOC = DELIVERY_LOCATION
					, @N_POST_ADDR1 = POSTAL_ADDRESS_LINE_1
					, @N_POST_ADDR2 = POSTAL_ADDRESS_LINE_2
					, @N_POST_ADDR_CODE = POSTAL_ADDRESS_CODE
				FROM
					CUSTOMER_D
				WHERE
					CUSTOMER_SRC_ID = @CUSTOMER_ID

				IF @CUSTOMER_NAME <> @N_CUSTOMER_NAME  OR @BILL_TO_CUSTOMER_D_ID <> @N_BILL_TO_CUSTOMER_D_ID  OR
					@CUSTOMER_CATEGORY_D_ID <> @N_CUSTOMER_CATEGORY_D_ID  OR @BUYING_GROUP_D_ID <> @N_BUYING_GROUP_D_ID  OR
					@PRIMARY_CONTACT_PERSON_D_ID <> @N_PRIMARY_CONTACT_PERSON_D_ID  OR @ALT_CONTACT_PERSON_D_ID <> @N_ALT_CONTACT_PERSON_D_ID  OR
					@DELIVERY_METHOD_D_ID <> @N_DELIVERY_METHOD_D_ID  OR @DELIVERY_CITY_D_ID <> @N_DELIVERY_CITY_D_ID  OR
					@POSTAL_CITY_D_ID <> @N_POSTAL_CITY_D_ID  OR @CREDIT_LIMIT <> @N_CREDIT_LIMIT  OR @OPEN_DATE <> @N_OPEN_DATE  OR
					@DISCOUNT <> @N_DISCOUNT  OR @IS_STMT_SENT <> @N_IS_STMT_SENT  OR @IS_CREDIT_HOLD <> @N_IS_CREDIT_HOLD  OR
					@PAYMENT_DAYS <> @N_PAYMENT_DAYS  OR @PHONE_NUMBER <> @N_PHONE_NUMBER  OR @FAX_NUMBER <> @N_FAX_NUMBER  OR
					@DELIVERY_RUN <> @N_DELIVERY_RUN  OR @RUN_POS <> @N_RUN_POS  OR @WEB <> @N_WEB  OR @DELIVERY_ADDR1 <> @N_DELIVERY_ADDR1  OR
					@DELIVERY_ADDR2 <> @N_DELIVERY_ADDR2  OR @DELIVERY_POSTAL_CODE <> @N_DELIVERY_POSTAL_CODE  OR
					@DELIVERY_LOC.STEquals(@N_DELIVERY_LOC) = 0  OR @POST_ADDR1 <> @N_POST_ADDR1  OR @POST_ADDR2 <> @N_POST_ADDR2  OR
					@POST_ADDR_CODE<> @N_POST_ADDR_CODE
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					UPDATE
						CUSTOMER_D
					SET
						CUSTOMER_NAME = @CUSTOMER_NAME
						, BILL_TO_CUSTOMER_D_ID = @BILL_TO_CUSTOMER_D_ID
						, CUSTOMER_CATEGORY_D_ID = @CUSTOMER_CATEGORY_D_ID
						, BUYING_GROUP_D_ID = @BUYING_GROUP_D_ID
						, PRIMARY_CONTACT_PERSON_D_ID = @PRIMARY_CONTACT_PERSON_D_ID
						, ALT_CONTACT_PERSON_D_ID = @ALT_CONTACT_PERSON_D_ID
						, DELIVERY_METHOD_D_ID = @DELIVERY_METHOD_D_ID
						, DELIVERY_CITY_D_ID = @DELIVERY_CITY_D_ID
						, POSTAL_CITY_D_ID = @POSTAL_CITY_D_ID
						, CREDIT_LIMIT = @CREDIT_LIMIT
						, OPENED_DATE = @OPEN_DATE
						, DISCOUNT_PERCENT = @DISCOUNT
						, IS_STMT_SENT = @IS_STMT_SENT
						, IS_CREDIT_HOLD = @IS_CREDIT_HOLD
						, PAYMENT_DAYS = @PAYMENT_DAYS
						, PHONE_NUMBER = @PHONE_NUMBER
						, FAX_NUMBER = @FAX_NUMBER
						, DELIVERY_RUN = @DELIVERY_RUN
						, RUN_POSITION = @RUN_POS
						, WEBSITE_URL = @WEB
						, DELIVERY_ADDRESS_LINE_1 = @DELIVERY_ADDR1
						, DELIVERY_ADDRESS_LINE_2 = @DELIVERY_ADDR2
						, DELIVERY_POSTAL_CODE = @DELIVERY_POSTAL_CODE
						, DELIVERY_LOCATION = @DELIVERY_LOC
						, POSTAL_ADDRESS_LINE_1 = @POST_ADDR1
						, POSTAL_ADDRESS_LINE_2 = @POST_ADDR2
						, POSTAL_ADDRESS_CODE = @POST_ADDR_CODE
					WHERE
						CUSTOMER_SRC_ID = @CUSTOMER_ID

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @CUSTOMER_ID, @CUSTOMER_NAME, @BILL_TO_CUSTOMER_ID, 
				@CUSTOMER_CATEGORY_ID, @BUYING_GROUP_ID, @PRIMARY_CONTACT_PERSON_ID,
				@ALT_CONTACT_PERSON_ID, @DELIVERY_METHOD_ID, @DELIVERY_CITY_ID, @POSTAL_CITY_ID,
				@CREDIT_LIMIT, @OPEN_DATE, @DISCOUNT, @IS_STMT_SENT,
				@IS_CREDIT_HOLD, @PAYMENT_DAYS, @PHONE_NUMBER, @FAX_NUMBER,
				@DELIVERY_RUN, @RUN_POS, @WEB, @DELIVERY_ADDR1,
				@DELIVERY_ADDR2, @DELIVERY_POSTAL_CODE, @DELIVERY_LOC,
				@POST_ADDR1, @POST_ADDR2, @POST_ADDR_CODE

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('CUSTOMER_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

CREATE OR ALTER PROCEDURE LOADER_ORDER_F AS
BEGIN

	-- LOAD ORDER_F

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT

		DECLARE @ORDERID INT, @CUSTOMERID INT, @SALESPERSONID INT, @PICKPERSONID INT, @CONTACTPERSONID INT,
			@ORDERDATE DATE, @EXDELDATE DATE, @PURCHASENUMBER NVARCHAR(20), @ISBACKORDER BIT, @PICK_COMPLETE DATETIME2(7)

		DECLARE @ORDER_F_ID INT, @CUSTOMER_D_ID INT, @SALE_PERSON_UNQ_D_ID INT, @PICKED_PERSON_UNQ_D_ID INT, 
			@CONTACT_PERSON_UNQ_D_ID INT, @ORDER_DATE DATE, @EXPECTED_DELIVERY_DATE DATE, @PONUMBER NVARCHAR(20),
			@IS_UNDERSUPPLY_BACKORDER BIT, @PICKING_COMPLETED DATETIME2(7)

		DECLARE @N_CUSTOMER_D_ID INT, @N_SALE_PERSON_UNQ_D_ID INT, @N_PICKED_PERSON_UNQ_D_ID INT, 
			@N_CONTACT_PERSON_UNQ_D_ID INT, @N_ORDER_DATE DATE, @N_EXPECTED_DELIVERY_DATE DATE, @N_PONUMBER NVARCHAR(20),
			@N_IS_UNDERSUPPLY_BACKORDER BIT, @N_PICKING_COMPLETED DATETIME2(7)				

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'ORDER_F'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				ORDERID
				, CUSTOMERID
				, SALESPERSONPERSONID
				, PICKEDBYPERSONID
				, CONTACTPERSONID
				, ORDERDATE
				, EXPECTEDDELIVERYDATE
				, CUSTOMERPURCHASEORDERNUMBER
				, ISUNDERSUPPLYBACKORDERED
				, PICKINGCOMPLETEDWHEN
			FROM
				WideWorldImporters.Sales.Orders
			WHERE
				LASTEDITEDWHEN BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				ORDERID

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @ORDERID, @CUSTOMERID, @SALESPERSONID, @PICKPERSONID, @CONTACTPERSONID, @ORDERDATE, 
			@EXDELDATE, @PURCHASENUMBER, @ISBACKORDER, @PICK_COMPLETE

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1

			IF NOT EXISTS (SELECT CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @CUSTOMERID)
			BEGIN

				SET @CUSTOMER_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @CUSTOMER_D_ID = CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @CUSTOMERID
	
			END

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @SALESPERSONID)
			BEGIN

				SET @SALE_PERSON_UNQ_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @SALE_PERSON_UNQ_D_ID = MAX(PERSON_UNQ_D_ID) FROM PERSON_D WHERE PERSON_SRC_ID = @SALESPERSONID

			END

			-- PICKED PERSON

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @PICKPERSONID)
			BEGIN

				SET @PICKED_PERSON_UNQ_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @PICKED_PERSON_UNQ_D_ID = MAX(PERSON_UNQ_D_ID) FROM PERSON_D WHERE PERSON_SRC_ID = @PICKPERSONID

			END

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @CONTACTPERSONID)
			BEGIN

				SET @CONTACT_PERSON_UNQ_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @CONTACT_PERSON_UNQ_D_ID = MAX(PERSON_UNQ_D_ID) FROM PERSON_D WHERE PERSON_SRC_ID = @CONTACTPERSONID

			END

			IF NOT EXISTS (SELECT ORDER_F_ID FROM ORDER_F WHERE ORDER_SRC_ID = @ORDERID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO ORDER_F (ORDER_SRC_ID, CUSTOMER_D_ID, SALES_PERSON_UNQ_D_ID, PICKED_PERSON_UNQ_D_ID, CONTACT_PERSON_UNQ_D_ID,
					ORDER_DATE, EXPECTED_DELIVERY_DATE, PONUMBER, IS_UNDERSUPPLY_BACKORDER, PICKING_COMPLETED)	
				VALUES (@ORDERID, @CUSTOMER_D_ID, @SALE_PERSON_UNQ_D_ID, @PICKED_PERSON_UNQ_D_ID, @CONTACT_PERSON_UNQ_D_ID, @ORDERDATE, @EXDELDATE,
					@PURCHASENUMBER, @ISBACKORDER, @PICK_COMPLETE)

			END
			ELSE
			BEGIN

				SELECT
					@N_CUSTOMER_D_ID = CUSTOMER_D_ID
					, @N_SALE_PERSON_UNQ_D_ID = SALES_PERSON_UNQ_D_ID
					, @N_PICKED_PERSON_UNQ_D_ID = PICKED_PERSON_UNQ_D_ID
					, @N_CONTACT_PERSON_UNQ_D_ID = CONTACT_PERSON_UNQ_D_ID
					, @N_ORDER_DATE = ORDER_DATE
					, @N_EXPECTED_DELIVERY_DATE = EXPECTED_DELIVERY_DATE
					, @N_PONUMBER = PONUMBER
					, @N_IS_UNDERSUPPLY_BACKORDER = IS_UNDERSUPPLY_BACKORDER
					, @N_PICKING_COMPLETED = PICKING_COMPLETED
				FROM
					ORDER_F
				WHERE
					ORDER_SRC_ID = @ORDERID

				IF @N_CUSTOMER_D_ID <> @CUSTOMER_D_ID OR @N_SALE_PERSON_UNQ_D_ID <> @SALE_PERSON_UNQ_D_ID OR
					@N_PICKED_PERSON_UNQ_D_ID <> @PICKED_PERSON_UNQ_D_ID OR @N_CONTACT_PERSON_UNQ_D_ID <> @CONTACT_PERSON_UNQ_D_ID OR
					@N_ORDER_DATE <> @ORDER_DATE OR @N_EXPECTED_DELIVERY_DATE <> @EXPECTED_DELIVERY_DATE OR
					@N_PONUMBER <> @PONUMBER OR @N_IS_UNDERSUPPLY_BACKORDER <> @IS_UNDERSUPPLY_BACKORDER OR
					@N_PICKING_COMPLETED <> @PICKING_COMPLETED
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					UPDATE
						ORDER_F
					SET
						CUSTOMER_D_ID = @CUSTOMER_D_ID
						, SALES_PERSON_UNQ_D_ID = @SALE_PERSON_UNQ_D_ID
						, PICKED_PERSON_UNQ_D_ID = @PICKED_PERSON_UNQ_D_ID
						, CONTACT_PERSON_UNQ_D_ID = @CONTACT_PERSON_UNQ_D_ID
						, ORDER_DATE = @ORDER_DATE
						, EXPECTED_DELIVERY_DATE = @EXPECTED_DELIVERY_DATE
						, PONUMBER = @PONUMBER
						, IS_UNDERSUPPLY_BACKORDER = @IS_UNDERSUPPLY_BACKORDER
						, PICKING_COMPLETED = @PICKING_COMPLETED
						, LAST_UPDATE_DATE = GETDATE()
					WHERE
						ORDER_SRC_ID = @ORDERID

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @ORDERID, @CUSTOMERID, @SALESPERSONID, @PICKPERSONID, @CONTACTPERSONID, @ORDERDATE, 
				@EXDELDATE, @PURCHASENUMBER, @ISBACKORDER, @PICK_COMPLETE

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('ORDER_F', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

CREATE OR ALTER PROCEDURE RUN_LOADERS AS
BEGIN

	DECLARE @RC int

	EXECUTE @RC = [dbo].[LOADER_STATE_D] 
	EXECUTE @RC = [dbo].[LOADER_CITY_D] 
	EXECUTE @RC = [dbo].[LOADER_BUYING_GROUP_D]
	EXECUTE @RC = [dbo].[LOADER_CUSTOMER_CATEGORY_D]
	EXECUTE @RC = [dbo].[LOADER_DELIVERY_METHOD_D]
	EXECUTE @RC = [dbo].[LOADER_PERSON_D]	
	EXECUTE @RC = [dbo].[LOADER_CUSTOMER_D]		
	EXECUTE @RC = [dbo].[LOADER_ORDER_F]		

END
GO